# Kerberos认证系统迁移部署指南

## 1. 系统环境要求

### 1.1 基础环境
- Python 3.6+
- Kerberos客户端
- 操作系统：Windows/Linux
- 网络环境：支持Kerberos认证的网络环境

### 1.2 依赖组件
- Kerberos客户端工具（kinit, klist等）
- Python依赖包：
  - pyotp
  - cryptography
  - python-kerberos

## 2. 系统迁移步骤

### 2.1 环境准备
1. **安装Python环境**
   ```bash
   # Linux
   sudo apt-get update
   sudo apt-get install python3 python3-pip
   
   # Windows
   # 从Python官网下载安装包
   ```

2. **安装Kerberos客户端**
   ```bash
   # Linux (Ubuntu/Debian)
   sudo apt-get install krb5-user
   
   # Linux (CentOS/RHEL)
   sudo yum install krb5-workstation
   
   # Windows
   # 从MIT Kerberos官网下载安装包
   ```

3. **安装Python依赖**
   ```bash
   pip install pyotp cryptography python-kerberos
   ```

### 2.2 配置文件迁移

1. **Kerberos配置文件**
   - 位置：`/etc/krb5.conf`（Linux）或 `C:\ProgramData\MIT\Kerberos5\krb5.ini`（Windows）
   - 需要根据新环境修改：
     - 领域名称
     - KDC服务器地址
     - 域名映射

2. **TOTP密钥文件**
   - 位置：`/etc/kerberos/totp_secrets.json`
   - 需要确保：
     - 文件权限正确设置
     - 密钥安全迁移
     - 路径配置正确

### 2.3 代码适配

1. **路径处理**
   ```python
   # 需要修改的代码部分
   def _get_config_path(self):
       if sys.platform == 'win32':
           return os.path.join(os.environ.get('PROGRAMDATA', 'C:\\ProgramData'),
                              'MIT', 'Kerberos5', 'krb5.ini')
       return '/etc/krb5.conf'
   ```

2. **文件权限处理**
   ```python
   # 需要添加的代码
   def _ensure_file_permissions(self, file_path):
       if sys.platform != 'win32':
           os.chmod(file_path, 0o600)
   ```

## 3. 系统配置

### 3.1 环境变量配置
```bash
# Linux
export KRB5_CONFIG=/etc/krb5.conf
export KRB5CCNAME=FILE:/tmp/krb5cc_0

# Windows
set KRB5_CONFIG=C:\ProgramData\MIT\Kerberos5\krb5.ini
set KRB5CCNAME=FILE:C:\temp\krb5cc_0
```

### 3.2 权限设置
```bash
# Linux
sudo chown root:root /etc/kerberos/totp_secrets.json
sudo chmod 600 /etc/kerberos/totp_secrets.json

# Windows
# 通过文件属性设置访问权限
```

## 4. 运行路径修改指南

### 4.1 配置文件路径修改
1. **Linux环境**
   ```python
   # 修改配置文件路径
   CONFIG_PATHS = {
       'krb5_conf': '/etc/krb5.conf',
       'totp_secrets': '/etc/kerberos/totp_secrets.json'
   }
   ```

2. **Windows环境**
   ```python
   # 修改配置文件路径
   CONFIG_PATHS = {
       'krb5_conf': 'C:\\ProgramData\\MIT\\Kerberos5\\krb5.ini',
       'totp_secrets': 'C:\\ProgramData\\MIT\\Kerberos5\\totp_secrets.json'
   }
   ```

### 4.2 临时文件路径修改
1. **Linux环境**
   ```python
   # 临时文件路径
   TEMP_PATHS = {
       'ticket_cache': '/tmp/krb5cc_0',
       'log_file': '/var/log/kerberos_auth.log'
   }
   ```

2. **Windows环境**
   ```python
   # 临时文件路径
   TEMP_PATHS = {
       'ticket_cache': 'C:\\temp\\krb5cc_0',
       'log_file': 'C:\\ProgramData\\MIT\\Kerberos5\\logs\\kerberos_auth.log'
   }
   ```

### 4.3 路径修改方法
1. **使用环境变量**
   ```python
   def get_config_path(self):
       if sys.platform == 'win32':
           base_path = os.environ.get('PROGRAMDATA', 'C:\\ProgramData')
           return os.path.join(base_path, 'MIT', 'Kerberos5')
       return '/etc/kerberos'
   ```

2. **使用配置文件**
   ```python
   def load_path_config(self):
       config_file = 'path_config.json'
       if os.path.exists(config_file):
           with open(config_file, 'r') as f:
               return json.load(f)
       return self.get_default_paths()
   ```

3. **路径验证**
   ```python
   def verify_paths(self):
       for path in self.CONFIG_PATHS.values():
           if not os.path.exists(os.path.dirname(path)):
               os.makedirs(os.path.dirname(path))
   ```

## 5. 常见问题处理

### 5.1 Kerberos认证问题
1. **票据获取失败**
   - 检查KDC服务器连接
   - 验证领域配置
   - 确认网络防火墙设置

2. **认证超时**
   - 检查系统时间同步
   - 验证票据有效期设置
   - 确认网络延迟

### 5.2 TOTP验证问题
1. **时间同步问题**
   - 确保系统时间准确
   - 配置NTP服务
   - 调整时间偏差容忍度

2. **密钥文件访问问题**
   - 检查文件权限
   - 验证文件路径
   - 确认加密/解密功能

## 6. 安全建议

### 6.1 文件安全
- 使用安全的文件权限
- 实施文件加密存储
- 定期备份密钥文件

### 6.2 网络安全
- 配置防火墙规则
- 使用加密通信
- 实施访问控制

### 6.3 系统安全
- 定期更新系统
- 实施日志监控
- 配置安全审计

## 7. 维护建议

### 7.1 日常维护
- 定期检查日志
- 监控系统性能
- 更新安全补丁

### 7.2 故障处理
- 建立故障处理流程
- 准备应急方案
- 保持配置备份

## 8. 性能优化

### 8.1 系统优化
- 配置适当的缓存
- 优化网络连接
- 调整超时设置

### 8.2 资源管理
- 监控内存使用
- 控制并发连接
- 优化文件IO

## 9. 测试验证

### 9.1 功能测试
- 认证流程测试
- TOTP验证测试
- 异常处理测试

### 9.2 性能测试
- 并发认证测试
- 响应时间测试
- 资源使用测试

## 10. 文档维护

### 10.1 配置文档
- 记录配置变更
- 维护环境信息
- 更新部署步骤

### 10.2 运维文档
- 记录故障处理
- 更新维护流程
- 保存测试报告

## 11. 注意事项

1. 在Windows环境下，所有路径使用双反斜杠或原始字符串
2. 确保所有目录具有适当的读写权限
3. 定期检查日志文件大小，避免磁盘空间不足
4. 在修改路径配置后，需要重启服务生效
5. 建议使用绝对路径而不是相对路径
6. 注意Windows和Linux的路径分隔符差异
7. 确保临时文件目录具有足够的空间
8. 定期清理临时文件和日志文件

## 12. 系统迁移特别注意事项

### 12.1 环境兼容性
1. **Python版本兼容性**
   - 确保Python版本兼容性（建议使用Python 3.6+）
   - 注意不同Python版本对加密库的支持差异
   - 检查pip包版本兼容性

2. **操作系统特性**
   - Windows系统需要特别注意路径长度限制（260字符）
   - Linux系统注意SELinux安全策略影响
   - 不同系统对文件锁定的处理方式不同

### 12.2 网络配置
1. **DNS配置**
   - 确保DNS解析正确配置
   - 检查hosts文件配置
   - 验证域名解析是否正常

2. **防火墙设置**
   - Kerberos默认端口：88（KDC）, 749（admin）
   - 确保防火墙允许Kerberos相关端口
   - 检查网络ACL配置

### 12.3 时间同步
1. **NTP配置**
   - 确保系统时间准确同步
   - 配置可靠的NTP服务器
   - 检查时间偏差容忍度设置

2. **时区设置**
   - 统一系统时区配置
   - 注意夏令时影响
   - 验证时间戳处理

### 12.4 安全配置
1. **加密算法**
   - 确认支持的加密算法
   - 检查加密强度要求
   - 验证密钥长度设置

2. **证书管理**
   - SSL/TLS证书配置
   - 证书链验证
   - 证书更新机制

### 12.5 性能考虑
1. **资源限制**
   - 系统文件描述符限制
   - 进程数限制
   - 内存使用限制

2. **并发处理**
   - 连接池配置
   - 线程安全考虑
   - 锁机制实现

### 12.6 监控告警
1. **日志监控**
   - 配置日志轮转
   - 设置日志级别
   - 实现日志聚合

2. **性能监控**
   - 认证响应时间
   - 系统资源使用
   - 并发连接数

### 12.7 备份恢复
1. **数据备份**
   - 配置文件备份
   - 密钥文件备份
   - 数据库备份（如果有）

2. **恢复流程**
   - 制定恢复计划
   - 定期演练恢复
   - 验证备份有效性

### 12.8 开发环境
1. **调试配置**
   - 日志级别设置
   - 调试模式开关
   - 性能分析工具

2. **测试环境**
   - 模拟认证配置
   - 测试数据准备
   - 自动化测试脚本

### 12.9 运维管理
1. **权限管理**
   - 服务账号权限
   - 文件访问权限
   - 网络访问权限

2. **变更管理**
   - 配置变更流程
   - 版本控制
   - 回滚机制

### 12.10 故障处理
1. **常见故障**
   - 认证失败处理
   - 网络超时处理
   - 系统异常处理

2. **应急预案**
   - 服务降级策略
   - 故障转移方案
   - 应急联系人

## 13. 迁移检查清单

### 13.1 迁移前检查
- [ ] 环境依赖检查
- [ ] 配置文件备份
- [ ] 数据备份
- [ ] 网络连通性测试
- [ ] 权限配置检查
- [ ] 时间同步检查
- [ ] 防火墙配置检查
- [ ] 监控系统准备

### 13.2 迁移中检查
- [ ] 服务停止确认
- [ ] 配置文件迁移
- [ ] 数据迁移
- [ ] 权限设置
- [ ] 服务启动
- [ ] 基本功能测试
- [ ] 监控系统验证

### 13.3 迁移后检查
- [ ] 功能完整性测试
- [ ] 性能测试
- [ ] 安全测试
- [ ] 监控系统确认
- [ ] 备份系统验证
- [ ] 文档更新
- [ ] 应急预案验证 